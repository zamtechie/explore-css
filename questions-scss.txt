
1.  Explain what is Sass? How it can be used?
    - When stylesheets are getting larger, more complex, and harder to maintain. 
      This is where a CSS pre-processor can help. Sass (which stands for ‘Syntactically awesome style sheets) 
      is an extension of CSS that enables you to use things like variables, nested rules, inline imports and more. 
      It also helps to keep things organised and allows you to create style sheets faster.

    - Sass works by writing your styles in .scss (or .sass) files, which will then get compiled into a regular CSS file.
      The newly compiled CSS file is what gets loaded to your browser to style your web application.
      This allows the browser to properly apply the styles to your web page.

2.  What are the SCSS basic features?
    1.  Variables
        - Variables are useful for things like colors, fonts, font sizes, and certain dimensions, 
          as you can be sure always using the same ones. Variables in SCSS start with $ sign

          $font-stack:    Helvetica, sans-serif;
          $primary-color: #333;

          body {
            font: 100% $font-stack;
            color: $primary-color;
          }

    2.  Nesting
        - Basic nesting refers to the ability to have a declaration inside of a declaration.

          nav {
            ul {
              margin: 0;
              padding: 0;
              list-style: none;
            }

            li { display: inline-block; }

            a {
              display: block;
              padding: 6px 12px;
              text-decoration: none;
            }
          }

    3.  Partials
        - The partial Sass files contain little snippets of CSS that can be included in other Sass files.
          This is a great way to modularize your CSS and help keep things easier to maintain.
          A partial is a Sass file named with a leading underscore. You might name it something like _partial.scss.
          The underscore lets Sass know that the file is only a partial file and that it should not be generated 
          into a CSS file. Sass partials are used with the @use rule.

    4.  Modules
        - This rule loads another Sass file as a module, which means we can refer to its variables, mixins, 
          and functions in our Sass file with a namespace based on the filename. 
          Using a file will also include the CSS it generates in your compiled output!

          // _base.scss
          $font-stack:    Helvetica, sans-serif;
          $primary-color: #333;

          body {
            font: 100% $font-stack;
            color: $primary-color;
          }

          // styles.scss
          @use 'base';

          .inverse {
            background-color: base.$primary-color;
            color: white;
          }

    5.  Mixins
        - A mixin provide to make groups of CSS declarations that you want to reuse throughout your site.
          You can even pass in values to make your mixin more flexible.

          SCSS Style

          @mixin transform($property) {
            -webkit-transform: $property;
            -ms-transform: $property;
            transform: $property;
          }
          .box { @include transform(rotate(30deg)); }

    6.  Inheritance
        - Using @extend lets you share a set of CSS properties from one selector to another.

          SCSS Style

          /* This CSS will print because %message-shared is extended. */
          %message-shared {
            border: 1px solid #ccc;
            padding: 10px;
            color: #333;
          }

          // This CSS won't print because %equal-heights is never extended.
          %equal-heights {
            display: flex;
            flex-wrap: wrap;
          }

          .message {
            @extend %message-shared;
          }

          .success {
            @extend %message-shared;
            border-color: green;
          }

          .error {
            @extend %message-shared;
            border-color: red;
          }

          .warning {
            @extend %message-shared;
            border-color: yellow;
          }

    7.  Operators
        - Sass has a handful of standard math operators like +, -, *, /, and %. 
          In our example we’re going to do some simple math to calculate widths for an aside & article.

          SCSS Style

          .container {
            width: 100%;
          }

          article[role="main"] {
            float: left;
            width: 600px / 960px * 100%;
          }

          aside[role="complementary"] {
            float: right;
            width: 300px / 960px * 100%;
          }

3.  Explain the @include, @mixin, @function functions and how they are used. What is %placeholder?

    i) @mixin A mixin lets you make groups of CSS declarations that you want to reuse throughout your site

    @mixin border-radius($radius) {
      -webkit-border-radius: $radius;
        -moz-border-radius: $radius;
          -ms-border-radius: $radius;
              border-radius: $radius;
    }
    .box { @include border-radius(10px); }

    ii) @extend directive provides a simple way to allow a selector to inherit/extend the styles of another one.

    .message {
      border: 1px solid #ccc;
      padding: 10px;
      color: #333;
    }

    .success {
      @extend .message;
      border-color: green;
    }

    .error {
      @extend .message;
      border-color: red;
    }

    iii) %placeholder are classes that aren’t output when your SCSS is compiled

    %awesome {
        width: 100%;
        height: 100%;
    }
    body {
        @extend %awesome;
    }
    p {
        @extend %awesome;
    }
    /* Output */
    body, p {
        width: 100%;
        height: 100%;
    }