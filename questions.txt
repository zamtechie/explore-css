CSS
---

1.  What is Box Model in css
    - 'Box Model is essentially a box wrapped around every HTML element.
      It consist of margin, border, padding and the actual content
      1.  Content:  Actual Content of the box where the text or image is placed.
      2.  Padding: Area surrounding the content (Space between the border and content).
      3.  Border: Area surrounding the padding.
      4.  Margin: Area surrounding the border

2.  What are CSS positions?
    - position property specifies types of positioning method is used for an element.
    - There are 5 types of positions:
      1.  static: It is default position and it is not affected by top, bottom, left and right properties.
      2.  relative: Elements are position relative to its normal position. Other content cannot be fitted in gaps left 
                    by these elements.
      3.  absolute: It is positioned to the nearest positioned element acestor, if there is not positioned acestor element
                    then it uses the document body and moves along with page scroll
                    Absolute element are removed from normal flow and can overlap elements.
      4.  fixed:  It position the elements relative to viewport, which means it will stay at its position even if we scroll
                  the page
      5.  sticky: It position the elements based on user scroll. It toggles element's position between the relative and fixed
                  depending upon the scroll. 
                  Its position is relative till its position is met the viewport and then sticks in the place.

3.  Capitalize first character of each word 'center me'
    - text-transform: capitalize

4.  What are the limitations of CSS?
    - Disadvantages of CSS are given below:
      - Browser Compatibility: Some style selectors are supported and some are not. We have to determine which style is 
        supported or not using the @support selector).
      - Cross Browser issue: Some selectors behave differently in a different browser).
      - There is no parent selector: Currently, Using CSS, you can’t select a parent tag.

5.  What are the different types of Selectors in CSS?

    - Universal Selector: The Universal selector is like a wilcard character, selecting all the elements
      of the page.
      Eg: 
      * {
          color: "gree"
        }

    - Element type Selector: This selector matches one or more HTML elements of the same name.
      Eg: 
      ul {
        line-style: none;  
      }

    - ID Selector:  This selector matches any HTML element that has an ID attribute with the same value as that 
      of the selector.
      Eg:
      #container {
        width: 960px;
      }

    - Class Selector: The class selector also matches all elements on the page that have their class attribute set
      to the same value as the class. 
      Eg:
      .box {
        padding: 10px;
        margin: 10px;
        width: 240px;
      }

    - Descendant Combinator: The descendant selector or, more accurately, the descendant combinator lets you combine two or more
      selectors so you can be more specific in your selection method.
      Eg:
      #container .box {
        float: left;
        padding-bottom: 15px;
      }

    - Child Combinator: A selector that uses the child combinator is similar to a selector that uses a descendant combinator, except
      it only targets immediate child elements.
      Eg:
      #container> .box {
        float: left;
        padding-bottom: 15px;
      }

    - General Sibling Combinator: A selector that uses a general sibling combinator to match elements based on sibling relationships.
      The selected elements are beside each other in the HTML.
      Eg:
      h2 ~ p {
        margin-bottom: 20px;
      }

    - Adjacent Sibling Combinator: A selector that uses the adjacent sibling combinator uses the plus symbol (+), and is almost the
      same as the general sibling selector. The difference is that the targeted element must be an immediate sibling, not just a
      general sibling.
      Eg:
      p + p {
        text-indent: 1.Sem;
        margin-bottom: 0;
      }

    - Attribute Selector: The attribute selector targets elements based on the presence and/or value of HTML attributes, and is 
      declared using square brackets.
      Eg:
      input [type=”text”] {
        background-color: #444;
        width: 200px;
      }
6.  What is a CSS Preprocessor? What are Sass, Less, and Stylus? Why do people use them?
    - CSS preprocessor is a tool used to extend the basic functionality of default vanilla CSS through its own scripting language.
      It helps us to use complex  logical syntax like - variable, functions, mixins, code nesting and inheritance to supercharging 
      your vanilla CSS.
    
    - SASS vs SCSS
      - SASS is based on indentation and SCSS(Sassy CSS) is not.
      - SASS uses .sass extension while SCSS uses .scss extension.
      - SASS doesn’t use curly brackets or semicolons. SCSS uses it, just like the CSS.

    - LESS: LESS is an acronym for “Leaner Stylesheets”. LESS is easy to add to any javascript projects by using NPM or less.js file. It uses
      the extension .less.
      LESS syntax is the same as the SCSS with some exceptions. LESS uses @ to define the variables.

    - Stylus: Stylus offers a great deal of flexibility in writing syntax, supports native CSS as well as allows omission of brackets,
      colons, and semicolons. It doesn’t use @ or $ for defining variables.

7.  What is VH/VW (viewport height/ viewport width) in CSS?
    - Its a CSS unit used to measure the height and width in percentage with respect to 'ViewPort'.
    - It is used mainly in responsive design techniques. The measure VH is equal to 1/100 of the height of the viewport. If the height of the
      browser is 1000px, 1vh is equal to 10px. Similarly, if the width is 1000px, then 1 vw is equal to 10px.

8.  Difference between reset vs normalize CSS?. How do they differ?
    - Reset CSS: CSS resets aim to remove all built-in browser styling. For example margins, paddings, font-sizes of all elements are reset
      to be the same. 

    - Normalize CSS: Normalize CSS aims to make built-in browser styling consistent across browsers. It also corrects bugs for common browser dependencies.

9.  What is the difference between inline, inline-block, and block?
    - Block Element: The block elements always start on a new line. They will also take space for an entire row or width.
      List of block elements are <div>, <p>.

    - Inline Elements: Inline elements don't start on a new line, they appear on the same line as the content and tags beside them. Some examples of
      inline elements are <a>, <span> , <strong>, and <img> tags. 

    - Inline Block Elements: Inline-block elements are similar to inline elements, except they can have padding and margins and set height and width values

10. What are Pseudo elements and Pseudo classes?
    - Pseudo-elements allows us to create items that do not normally exist in the document tree, for example ::after.

      ::before
      ::after
      ::first-letter
      ::first-line
      ::selection
      In the below example, the color will appear only on the first line of the paragraph.

      p: :first-line {
	      color: #ffOOOO;
	      font-variant: small-caps;
      }

    - Pseudo-classes select regular elements but under certain conditions like when the user is hovering over the link.

      :link
      :visited
      :hover
      :active
      :focus
      Example of the pseudo-class, In the below example, the color applies to the anchor tag when it’s hovered.

      /* mouse over link */
      a:hover {
	      color: #FFOOFF;
      }

11. What are the differences between adaptive design and responsive design?
    - Adaptive Design	
      - Adaptive design focuses on developing websites based on multiple fixed layout sizes.	
      - When a website developed using adaptive design is opened on the desktop browser, first the available space is detected and then the layout
        with most appropriate sizes are picked and used for the display of contents. Resizing of browser window has no affect on the design.	
      - Usually, adaptive designs use six standard screen widths - 320 px, 480 px, 760 px, 960 px, 1200 px, 1600 px. 
        These sizes are detected and appropriate layouts are loaded.	This design makes use of CSS media queries for changing styles depending on
        the target devices properties for adapting to different screens.
      - It takes a lot of time and effort to first examine the options and realities of the end users and then design best possible adaptive solutions them.	


    - Responsive Design
      - Responsive design focuses on showing content on the basis of available browser space.
      - When a website developed using responsive design is opened on a desktop browser and when we try to resize the browser window, the content of
        the website is dynamically and optimally rearranged to accomodate the window.
      - Generally, Responsive design takes much less work to build and design fluid websites that can accomodate content from screen depending on the screen size.
      - Gives a lot of control over the design to develop sites for specific screens. No much control over the design is offered here.

12. How are the CSS selectors matched against the elements by the browser?
    - The order of matching selectors goes from right to left of the selector expression.
    - The elements in the DOM are filtered by browsers based on the key selectors and are then traversed up to the parent elements for determining the matches.
    - The speed of determining the elements depends on the length of the chain of selectors.

13. How is border-box different from content-box?
    - content-box is the default value box-sizing property.
      The height and the width properties consist only of the content by excluding the border and padding.
      Eg:
      div{
          width:300px;
          height:200px;
          padding:15px;
          border: 5px solid grey;
          margin:30px;
          -moz-box-sizing:content-box;
          -webkit-box-sizing:content-box;
          box-sizing:content-box;
      }
      Here, the box-sizing for the div element is given as content-box. That means, the height and width considered for the div content exclude the padding and border.

    - The border-box property includes the content, padding and border in the height and width properties.
      Eg:
      div{
          width:300px;
          height:200px;
          padding:15px;
          border: 5px solid grey;
          margin:30px;
          -moz-box-sizing:border-box;
          -webkit-box-sizing:border-box;
          box-sizing:border-box;
      }
      Here, the box-sizing for the div element is given as border-box. That means the height and width considered for the div content will also include the padding and border.
      This means that the actual height of the div content will be:

      actual height = height - 
                      padding on top and bottom - 
                      border on top and bottom
                    = 200 - (15*2) - (5*2) 
                    = 160 px
      and the actual width of the div content would be:

      actual width  = width - 
                      padding on right and left - 
                      border on right and left
                    = 300 - (15*2) - (5*2) 
                    = 260 px

14. How is opacity specified in CSS3?
    - Opacity refers to the degree to which the content is transparent or opaque. We can use the property named opacity which takes the values ranging from 0 to 1.
    0 specifies that the element is completely transparent where 1 means that the element is completely opaque.

15. What is a z-index, how does it function?
    - z-index is used for specifying the vertical stacking of the overlapping elements that occur at the time of its positioning. It specifies the vertical
      stack order of the elements positioned that helps to define how the display of elements should happen in cases of overlapping.

      The default value of this property is 0 and can be either positive or negative. Apart from 0, the values of the z-index can be:

      Auto: The stack order will be set equal to the parent.
      Number: The number can be positive or negative. It defines the stack order.
      Initial: The default value of 0 is set to the property.
      Inherit: The properties are inherited from the parent.
      The elements having a lesser value of z-index is stacked lower than the ones with a higher z-index.

16. What are the properties of flexbox?
    - Flexbox stands for flexible box and it was introduced around 2017 in CSS with the purpose of providing an efficient way to handle layouts,
      align elements within them and distribute spaces amongst the items in dynamic/responsive conditions. It provides an enhanced ability to
      alter the dimensions of the items and make use of the available space in the container efficiently.
      In order to achieve this, CSS3 provides some properties.

      The properties of flexbox are as follows:

      - flex-direction: This property helps in defining the direction the container should stack the items targetted for flex. The values of this property can be
        - row: Stacks items horizontally from left to right in the flex container.
        - column: Stacks items vertically from top to bottom in the flex container.
        - row-reverse: Stacks items horizontally from right to left in the flex container.
        - column-reverse: Stacks items vertically from bottom to top in the flex container.
      - flex-wrap: This property specifies of the flex items should be wrapped or not. Possible values are:
        - wrap: The flex items would be wrapped if needed.
        - nowrap: This is the default value that says the items won’t be wrapped.
        - wrap-reverse: This specifies that the items will be wrapped if needed but in reverse order.
      - flex-flow: This property is used for setting both flex-direction and flex-wrap properties in one statement.
      - justify-content: Used for aligning the flex items. Possible values are:
        - center: It means that all the flex items are present at the center of the container.
        - flex-start: This value states that the items are aligned at the start of the container. This is the default value.
        - flex-end: This value ensures the items are aligned at the end of the container.
        - space-around: This value displays the items having space between, before, around the items.
        - space-between: This value displays items with spaces between the lines.
      - align-items: This is used for aligning flex items.
      - align-content: This is used for aligning the flex lines.

17. What is cascading in CSS? 
    - “Cascading” refers to the process of going through the style declarations and defining weight or importance to the styling rules that help
      the browser to select what rules have to be applied in times of conflict. The conflict here refers to multiple rules that are applicable
      to a particular HTML element. In such cases, we need to let the browser know what style needs to be applied to the element.
      This is done by cascading down the list of style declarations elements.

18. When does DOM reflow occur?
    - Reflow is the name of the web browser process for re-calculating the positions and geometries of elements in the document,
      for the purpose of re-rendering part or all of the document. 
      
      Reflow occurs when:
      - Insert, remove or update an element in the DOM.
      - Modify content on the page, e.g. the text in an input box.
      - Move a DOM element.
      - Animate a DOM element.
      - Take measurements of an element such as offsetHeight or getComputedStyle.
      - Change a CSS style

19. Different Box Sizing Property?
    - The box-sizing CSS property sets how the total width and height of an element are calculated.

    - Content-box: The default width and height values apply to the element's content only. The padding and border are added to the outside of the box.
    - Padding-box: Width and height values apply to the element's content and its padding. The border is added to the outside of the box. Currently,
      only Firefox supports the padding-box value.
    - Border-box: Width and height values apply to the content, padding, and border.

20. Can you name the four types of @media properties?
    - The four types of @media properties are:

    - All → It’s the default property. Used for all media-type devices.
    - Screen → Used for computer screen, mobile screen.
    - Print → Used for printers.
    - Speech → Used for screen readers

21. What is the grid system?
    - CSS Grid Layout is the most powerful layout system available in CSS. It is said to be a 2-dimensional system, meaning it can handle both
    columns and rows, unlike flexbox which is largely a 1-dimensional system

22. What are the different ways to hide the element using CSS?
    - Using display property(display: none). It’s not available for screen readers. The element will not exist in the DOM
      if display: none is used.
    - Using visibility property(visibility: hidden), will take up the space of the element. It will be available to screen reader users.
      The element will actually be present in the DOM, but not shown on the screen.
    - Using position property (position: absolute). Make it available outside the screen

23. What does the :root pseudo-class refer to?
    - The :root selector allows you to target the highest-level “parent” element in the DOM, or document tree.
      It is defined in the CSS Selectors Level 3 specification

24. What does Accessibility (a11y) mean?
    - Accessibility refers to how software or hardware combinations are designed to make a system accessible to persons with disabilities,
      such as visual impairment, hearing loss, or limited dexterity.

      For example, a website developed with accessibility in mind might have text-to-speech capabilities.
      In the USA public websites have to have accessible compliance. It’s defined in 508 compliance.
      It gives the guidelines and best practices for all website users that should be met with key areas of accessibility

25. How do I restore the default value of a property?
    - The keyword initial can be used to reset it to its default value

26. Difference between CSS grid vs flexbox?
    - CSS Grid Layout is a two-dimensional system, meaning it can handle both columns and rows.
      Grid layout is intended for larger-scale layouts which aren’t linear in design.
    - Flexbox is largely a one-dimensional system (either in a column or a row).
    Flexbox layout is most appropriate to the components of an application

27. How does Calc work?
    - The CSS3 calc() function allows us to perform mathematical operations on property values. Instead of declaring,
      for example, static pixel values for an element's width, we can use calc() to specify that the width is the result
      of the addition of two or more numeric values.

28. What do CSS Custom properties variables mean?
    - Custom properties (sometimes referred to as CSS variables or cascading variables) are defined by users that contain specific 
      values to be reused throughout a document. The value is set using -- notion. And the values are accessed using the var() function.

29. What is the difference between CSS variables and preprocessor(SASS, LESS, Stylus) variables?
    - CSS variables can be used without the need for a preprocessor. Currently, all the major browsers support the CSS variables. 
    - CSS variable cascade. But the preprocessor variables don’t cascade. 
    - CSS variable can be accessed and manipulated in javascript

30. What does * { box-sizing: border-box; } do? What are its advantages?
    - It makes every element in the document include the padding and border in the element’s inner dimension for the height and width computation.  
    - In box-sizing: border-box, The height of an element is now calculated by the content's height + vertical padding + vertical border width.
    - The width of an element is now calculated by the content's width + horizontal padding + horizontal border width

31. What does !important mean in CSS?
    - The style is having the important will have the highest precedence and it overrides the cascaded property.

32. What is specificity? How to calculate specificity?
    - A process of determining which CSS rule will be applied to an element. It actually determines which rules will take precedence.
      Inline style usually wins then ID then the class value (or pseudo-class or attribute selector),
      the universal selector (*) has no specificity. ID selectors have a higher specificity than attribute selectors

33. What is progressive rendering? How do you implement progressive rendering in the website?. What are the advantages of it?
    - Progressive rendering is the name given to techniques used to improve the performance of a webpage (in particular, improve perceived load time)
      to render content for display as quickly as possible.

    - We can implement the progressive rendering of the page by loading the lazy loading of the images.
      We can use Intersection Observer API to lazy load the image. The API makes it simple to detect when an element enters the viewport
      and take an action when it does. Once the image enters the viewport, we will start loading the images.

34. What are the advantages of using translate() instead of absolute position?
    - Translate() does not cause the browser to trigger repaint and layout and instead only acts on the compositor.
      The absolute position triggers the repaint or DOM reflow. So, translate() gives better performance

35. How to determine if the browser supports a certain feature?
    - The @support in CSS can be very useful to scan if the current browser has support for a certain feature.

36. How does this property work overflow: hidden?
    - The overflow property in CSS is used for specifying whether the content has to be clipped or the scrollbars have to be added
      to the content area when the content size exceeds the specified container size where the content is enclosed.
      If the value of overflow is hidden, the content gets clipped post the size of the container thereby making the content invisible

37. What do you have to do to automatically number the heading values of sections and categories?
    - We can use the concept of CSS counters. This lets us adjust the appearance of the content based on the location in a document.
    While using this, we need to first initialize the value of the counter-reset property which is 0 by default.
    The same property is also used for changing the value to any number that we need. Post initialization, the counter’s value can
    be incremented or decremented by using the counter-increment property. The name of the counter cannot be CSS keywords like “none”,
    “initial”, “inherit” etc. If the CSS keywords are used, then the declaration would be ignored.

    Consider an example as shown below:

    body {
      counter-reset: header;   /* define counter named 'header' whose initial value is 0 by default */
    }

    h2::before {
      counter-increment: header;   /* The value of header counter by 1.*/
      content: "Header " counter(header) ": ";  /* To display word Header and the value of the counter with colon before it.*/
    }

    Here, we are trying to achieve auto count increment and display feature for the h2 tag.
    Wherever we use h2 tag, the content will be prefixed by "Header 1 : " , "Header 2 : ", "Header 3 : " etc

38. How is the nth-child() different from nth of type selectors?
    - Both are pseudo-classes (Pseudo-classes are those keywords that specifies the special state of the selected element).
      
      The nth-child() pseudo-class is used for matching elements based on the number that represents the position of an element 
      based on the siblings. The number is used to match an element on the basis of the element’s position amongst its siblings.

      For example, in the below piece of code, if we give nth-child(4) for the example class, then the 4th child of the example
      class is selected irrespective of the element type. Here, the fourth child of the example class is the div element.
      The element is selected and a background of black is added to it.

      .example:nth-child(4) {   
          background: black; 
      }
      <div class="example">
        <p>This is a paragraph.</p>
        <p>This is a paragraph.</p>
        <p>This is a paragraph.</p>
        <div>This is a div.</div> <!-- 4th Element to select and apply style-->
        <div>This is a div.</div> 
        <p>This is a paragraph.</p>
        <p>This is a paragraph.</p>
        <div>This is a div.</div>
      </div>
      
      The nth-of-type() pseudo-class is similar to the nth-child but it helps in matching the selector based on a number that represents
      the position of the element within the elements that are the siblings of its same type.
      The number can also be given as a function or give keywords like odd or even.

      For example, in the below piece of code, if we give p:nth-of-type(even) for the example class, then all the even paragraph tags
      are selected within the example class and the style of background black is applied to them. The selected elements are marked in
      comments in the below code:

      .example p:nth-of-type(even) { 
          background: black; 
      }
      <div class="example">
        <p>This is a paragraph.</p> 
        <p>This is a paragraph.</p> <!-- Select this and apply style-->
        <p>This is a paragraph.</p> 
        <div>This is a div.</div>
        <div>This is a div.</div> 
        <p>This is a paragraph.</p> <!-- Select this and apply style-->
        <p>This is a paragraph.</p> 
        <div>This is a div.</div>
        <p>This is a paragraph.</p> <!-- Select this and apply style-->
        <div>This is a div.</div>
      </div>

39. What is the importance of CSS Sprites?
    - CSS sprites are used for combining multiple images in a single larger image. They are commonly used for representing icons that are used
      in the user interfaces.
      The main advantages of using sprites are:
      - It reduces the number of HTTP requests to get data of multiple images as they are acquired only by sending a single request.
      - It helps in downloading assets in advance that help display icons or images upon hover or other pseudo-states.
      - When there are multiple images, the browser makes separate calls to get the image for each of them. Using sprites, the images are
        combined in one and we can just call for that image using one call.

40. What do you understand by tweening in CSS?
    - Tweening is the process of filling the gaps between the key sequences, i.e between the keyframes that are already created.
      Keyframes are those frames that represent start and end point of animation action. Tweening involves generating intermediate keyframes
      between two images that give the impression that the first one has evolved smoothly to the second image. For this purpose, we use
      properties like transforms - matrix, translate, scale, rotate etc.

      In the below example, we are generating intermediate frames of paragraph elements to slide through from the start to the right edge of the browser.

      p {
        animation-duration: 2s;
        animation-name: slidethrough;
      }

      @keyframes slidethrough {
        from {
          margin-left: 100%;
          width: 300%; 
        }

        to {
          margin-left: 0%;
          width: 100%;
        }
      }
      Here, the paragraph element specifies that the animation process should take 2 seconds for execution from start to the finish.
      This is done by using the animation-duration property. The animation-name of the @keyframes is defined by using the property animation-name.
      The intermediate keyframes are defined by using @keyframes rule.
      In the example, we have just 2 keyframes. The first keyframe starts at 0% and runs till the left margin of 100% which is the rightmost
      edge of the containing element. The second keyframe starts at 100% where the left margin is set as 0% and the width to be set as 100% which
      results in finishing the animation flush against the left edge of the container area

41. Why do we need to use clear property along with floats in CSS?
    - The clear property along with floats is used for specifying which side of floating elements is not supposed to float.
    An element having clear property ensures that the element does not move up adjacent to the float. But the element will be moved down past the float.

42. How will you fix browser-specific styling issues?
    - Different ways to fix browser-specific issues.
      - We can write browser-specific styles separately in different sheets and load that only when the specific browser is used. 
        This makes use of the server-side rendering technique.
      - We can use auto-prefix for automatically adding vendor prefixes in the code.
      - We can also use normalize.css or reset CSS techniques.

4.  What is the default font-size of text in webpage?
5.  What new feature introduced in CSS3
6.  Difference between px, em and rem units?
7.  What is the use of sprite image?
8.  What is the use of calc()?
9.  What are possible values of "Position" attributes what is difference between them?
10.  What steps you will to to develop responsive UI/Screen?
11.  How media queries help to develop an responsive UI/Screen?